***************************************

ООП

***************************************


Определения главных принципов ООП (примерно)
- наследование. созданные объекты могут наследовать методы и классы у других объектов а так же у прототипов. прототипы просто содержать в себе методы которые можно наследовать классами. При создании нового обекта с наследованием метод или класс могут наследоваться, переопределится или добавиться к наследованным.
- полиморфизм. при наследовании методы и классы могут изменяться ребенком. классы переписываться а метода дописываться. И всё это достигается за счет гибкого понимания типа объекта джаваскриптом при его использовании.
- инкапсуляция. Возможность сделать приватными(скрыть для всех зон видимости кроме нужных) функции и переменные.Раньше в JS это делалось костылями. В новом станедарте обозначаесся кусок файла с функцией где получаем результат работы фонкции и ему прописывается экспорт. получается что все внутренние функции и переменные для успешной работы главнйо функции есть в файле и всё отрабатывает, н она экспорт идет только результат отработки. а в другм файле мы ипортируем этот результат. и там уже не видно того что не надо, оно остается в том файле откуда экспортировали. и кстати это ни в каких браузерах не работает) кароче в ES6 еще инкопсуляции особо нет. 


Как сделать объект
function Animal(name){ 
    this.name = name;
    this.weight = 1;
}

*******************************************

Способ создания обхекта с его свойствами и методами взятыми из прототипа.
Это правильная запись.

function Animal(name){ 
    this.name = name;
    this.weight = 1;
}

Animal.prototype.eat = function(){
    this.weight++;
}
Animal.prototype.log = function(){
    console.log(this.name + ' ' + this.weight);
}


*********************************************
Пример создания объекта с конструктором на новом стандарте

window.onload = function(e){
    var a1 = new Cat('Murzic',2,54);
    
    a1.eat();
    a1.log();
}


//Создаем класс с конструктором
class Animal{
    constructor(name, x, y){
        this.name = name;
        this.x = x;
        this.y = y;
        this.weight = 1;
    }
    
    eat(){
        this.weight++;
    }
    log(){
        console.log(this.name + ' ' + this.weight + ' ' + this.x + ' ' + this.y);
    }
}

***********************************************
//Создаем объект класса и добавляем ему собственное свойство приплюсовывая его к уже существующему конструктору
class Cat extends Animal{
    constructor(name, x, y){
        super(name, x, y);
        this.lifes = 9;
    }
}


**********************************************
//Можно так же добавить к существующему методу класса созданному конструктором дополнительные инструкции для определенного объекта

class Cat extends Animal{
    constructor(name, x, y){
        super(name, x, y);
        this.lifes = 9;
    }
    log(){
        return super.log() + ' ' + this.lifes;
    }
}

***********************************************
Это просто пример как создат массив и напихать в созданнх обхектов а потмо вывести циклом используя метода обектов

window.onload = function(e){
    var animals = []
    animals.push(new Cat('Murzic',2,54));
    animals.push(new Dog('Sharic',20,30));
    animals.push(new Cat('Murzic2',23,554));
    animals.push(new Dog('Sharic2',204,340));
    
    for (let animal of animals){
        animal.eat();
        animal.log();
        console.log(animal.log() );
    }
}
