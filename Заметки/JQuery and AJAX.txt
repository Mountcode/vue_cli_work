***************************************

JQUERY


***************************************
Вместо:
$(document).ready(function(){
})
Надо писать
$(function(){

})


***************************************
$('<option/>').appendTo('select') - такая запись создаст новый тег option


****************************************

Не нужно вешать события просто //click
Подвешивай их через on
variable.on('click',function(){
})

****************************************
Шпаргалка JQuery
http://jquery.page2page.ru/tags/ifr.html

****************************************
Сброс цепочки анимации через функцию stop
$(this).stop(true).fadeIn(300).fadeOut(300).fadeIn(300).fadeOut(300).fadeIn(300)
так она не будет запускаться столько раз сколько кликнулит а только 1 раз.
****************************************
$('select').find('option:gt(0)') - Запись выбрать все option в этом селекте после первого

*****************************************
Короткая запись "переключить класс у массива только у активного элемента"
$('.menu a").removeClass('active).filter(this).addClass('active');

*****************************************
Как правильно написать JQuery плагин

это первоночальная структура плагина:
(function($){
    $.fn.ИМЯ ПЛАГИНА = function(){
        Код плагина
        
        return this;
    }
})(JQuery)

Любой плагин должен работать с объектом JQuery который может быть как дом элементом так и массивом а значить всё что мы туда передаем нужно обходить циклом. Правильный код такой

(function($){
    $.fn.ИМЯ ПЛАГИНА = function(){
        this.each(function(){
            Код плагина
        })
        
        return this;
    }

})(JQuery)

Так же этот плагин должен быть объектом дял передачи параметром. Надо делать так

(function($){
    $.fn.ИМЯ ПЛАГИНА = function(settings){
       
       //делаем массив options. сливаем его вместе с массивом settings куда и 
       //передаем набор параметров. Запись $.extend берет из второго массива значение по умолчанию ЕСЛИ первым массивом (массивом пользовательских параметров) мы не передали такое значение. Кароче массив со значениями по //умолчанию которые используются если не передат ьсвои
       
        var options = $.extend(settings,{
            'd' : ' ',
            cnt: 2
        });
         
        this.each(function(){
            Код плагина
        })
        
        return this;
    }

})(JQuery)


AJAX

$(...).load - подгрузить в html-элемент данные с сервера
$.get       - выполнить get-зaпрос на сервер
$.post      - выполнить post-зaпрос на сервер
$.ajax      - выполнить любой запрос на сервер с тонкой настройкой

Пример простого AJAX запроса

$.post(урл до файла php, данные, колбек, тип данных которые ожидаем от сервера)

$.post('php/scripts.php',{name: '1',phone: '88',email: 'erer@er'}, function(data){
    console.log(data);
});


serialize() - функция создания и переработки в массив данных из формы для AJAX

//
Без serialize вызов функции post или get может выглядеть так

$.post('php/scripts.php',{name: 'name',phone: '+734234'}, function(data){
Т.е. вот так, в массиве там данные передаются

//

$form.serialize();

let form = $('.fomrd');
let res = $('.result');

$.post('php/scripts.php',form.serialize(), function(data){
    console.log(data);
    if(data == '1'){
        res.html("Заявка отправлена");
    }
    else{
        res.html(data);
    }
}, 'json');


Есть возможность использовать спец функцию после ответа AJAX помимо стандартного колбека. это fail,done или always. Например функция always после ответа сервера, и не только ответа в ожидаемом формате но даже ответа о том что сервер упал, может выполнить свой колбек. Пишется это все через точку в продолжении функции post:
$.post('php/scripts.php',form.serialize(), function(data){
    console.log(data);
}, 'json').always(function(){
    console.log('Сервер вернул ответ');
});




Теперь все то же самое но функцией $.ajax с более тонкими настройками:

beforeSend
complete
error
success


//

$.ajax({
    url:  "php/scripts.php",
    method: "POST",
    data: form.serialize(),
    dataType: 'json',
    success: function(data){
        $('span[class*="error_"]').text('');
        if(data.res){
            res.html("Заявка отправлена");
        }
        else{
            $('.send').removeAttr('disabled');
            console.log(data.errors);
            for (var key in data.errors) {
                $('span[class*="error_'+key+'"]').text(data.errors[key]);
            }
        }
    },
    error: function(){
        res.html("Сервер не отвечает");
    },
    compite: function(){
        $('.loader').removeClass('show');
    },
});







/////////////=======================/////////////////////
/////////////=======================/////////////////////
