VUE CLI
npm i -g vue-cli

шаблоны
webpack
webpack-simple

//
vue init webpack-simple vuelessons -(последним задаём название проекта)

////////////////////////////////////////////////////////////////

$ - через доллар указываются системные функции Vue
////////////
Vue можно не инициализировать через свойство el. можно ег оубрать, и после вызова объекта Vue использовать:

vue.$mount('#app') //$mount - как раз отвечает за это

////////////

Вообще шаблон можно описывать не в HTML а прямо во Vue. Это свойство template:
var vue1 = new Vue({
		data:{
				title: 'Vue 1'
		},
		template:'<h1>{{title}}</h1>'
})
vue1.$mount('#app')

- В таком методе есть нюанс. Всё что находится в template должно быть завернута в один тег, например div. 

////////////

Computed. Вычисленные финкции. Внутри указываются функции.
В шаблоне эти функии вызываются как переменные (т.е. без () )

new Vue({
		el: '#app',
		data:{
				isActive:false,
				color: 'yellow'
		},
		computed:{
				getCssClasses: function(){
						return{
								'red': this.isActive,
								'green': !this.isActive
						}
				}
		},
		methods:{
		}
})

////////////

components. - поле в корне приложения в котором указываются компоненты для локального использования конкретно в этом приложении. Для этого компонент нужно обернуть в переменную и указать ее тут.

////////////
Watch - так же добавляется в корень приложения. Позволяет запускать функции при изменении переменных. Для этого в watch нужно записать функция имя которой будет совпадать с переменной которой нужно отслеживать. И при изменении этой переменной в приложении будет запускаться функция.
Так же эта функция может принимать val который будет равен отслеживаемой переменной.

////////////

filter - для создания фильтров. принимает в себя функции. С обязательным return. Все фильтры создаются самостоятельно, из коробки во vue ничего нет.

filters: {
	lowercase(value){
	return value.toLowerCase()
	}
}
применение 
<h2>{{ title | lowercase }} </h2>	


////

Пример фильтров. Поиск по списку побуквенно через ввод в инпут

<input type="text" v-model="searchName">
<ul>
	<li v-for="name of filterednames">{{name}}</li>
</ul


data(){
	return{
	searchName: '';
		names: ['Pete', 'Nuna', 'Zuza', 'Loli']
	}
},
comuted:{
	filteredNames(){
		return this.names.filter(name =>{
			return name.toLowerCase().indexOf(this.searchName.toLowerCase()) !== -1
		})
	}
}

////////////
Миксины - паттерны компонентов для многоразового использования.

Если мы находимся в компоненте который импортируется в основное приложение на ряду с другими компонентами тогда:
1. импортируем туда миксин из одильного файла конечно же.
import ListMixin from '.listMixin'

2. В описание этого модуля добавляем свойство mixins где описываем этот и другие необходимые миксины.

export default{
	mixins:[ListMixin]
}

из миксина передаеются как функции так и переменные.

////////////////////////////////////////////////////////////////

Основа конструктора Vue
new Vue({
		el: '#app',
		data:{
				url: 'https://google.com'
		},
		methods:{
				changeName: function(event){
						this.name = event.target.value;
				},
		}
})


////////////////////////////////////////////////////////////////
Методы жизненного цикла приложения Vue

beforeCreate - перед созданием приложение
created - в момент создания
beforeMount - перед добавлением уже скомпилированного шаблона в DOM
mounted - после добавления шаблона
//
beforeUpdate - отслеживает изменения. перед изменением
updated - отслеживает изменения. по завершению изменения
//
beforeDestroy - Перед уничтожением экземпляра
destroed - по уничтожению экземпляра

var vue1 = new Vue({
		el: '#app',
		data:{
				title: 'Vue 1'
		},
		beforeCreate: function(){
				console.log('beforeCreate')
		},
		created: function(){
				console.log('created')
		},
		beforeMount: function(){
				console.log('beforeMount')
		},
		mounted: function(){
				console.log('mounted')
		},
		beforeUpdate: function(){
				console.log('beforeUpdate')
		},
		updated: function(){
				console.log('updated')
		},
		beforeDestroy:function(){
				console.log('beforeDestroy')
		},
		destroyed:function(){
				console.log('destroed')
		},
		methods:{
				dst:function(){
						this.$destroy();
				}
		}
})

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

Примеры дериктив
v-bind - для описания динамических значений внутри атрибутов

<a v-bind:href="url">{{ url }}</a>

////////////
v-html - вывод html элементов
<h2 v-html="link"></h2> 
/
data:{
		link: '<a href="https://google.com">google</a>'
},
/

///////////
v-on - обработка события
v-on:click="addOne" - на клик обращение к методу addOne

<h2>Counter = {{count}} </h2>
<input type="submit" value="Add" v-on:click="addOne">
/
метод 
addOne: function(){
		this.count++
}
/
Так же можно писать метод инлайном простым JS
<h2>Counter = {{count2}} </h2>
<input type="submit" value="Add" v-on:click="count2++">

Можно передать параметры
<input type="submit" value="Add" v-on:click="addOne(5)">

addOne: function(num){
		this.count+=num
}

Если вместе с параметрами нужно передать стандартный параметр e то его нужно обозначить ($event):

v-on:click="addOne($event, 5,'передаем строку')"

//////////

v-model - это т.н. Two way binding. суть в том что организуется двустороняя связь инпута с элементом. Значение элемента лежит в инпуте. при изменении инпута значение элемента меняется.

<input type="text" v-model="inputValue">
<h1> {{inputValue}} </h1>

//////////
v-if - условие булево

<h2 v-if="isVis">Visible</h2>
<h2 v-else>Invisible</h2>
<input type="submit" @click="isVis = !isVis">

или else if

<h2 v-if="type === 'a'">A</h2>
<h2 v-else-if="type === 'b'">B</h2>
<h2 v-else-if="type === 'c'">C</h2>
<h2 v-else>Not</h2>
<hr>
<input type="text" v-model="type">

//////////

Группировка условий
<template v-if="issv">
		<h2>1111</h2>
		<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime, dolor.</p>
</template>
<template v-else>
		<h2>222</h2>
		<p>Lorem ipsum dolor sit amet consectetur </p>
</template>

//////////
v-show - дериктива спрятать/показать display:none


//////////
v-for - Работа со списками. Вывод массива перебором

<li v-for="person in people">{{ person }}</li>
data:{
		people: [
				'vlad',
				'max',
				'ira'
		]
}

Так можно вывести индексы элементов
<li v-for="(person, index) in people">{{index + 1}}{{ person }}</li> 


И если бы это был массив с объектами то:
<li v-for="(person, index) in people">
		{{index + 1}}. {{ person.name }} - <i>{{person.age}}</i>
</li> 

people: [
		{name: 'vlad',age: '23'},
		{name: 'max',age: '32'},
		{name: 'elena', age: '43'},
]

А так можно вывести массив с числами создавая его прямо в дериктиве
<li v-for="num of 10">{{num}}</li>


Если с помощью v-for мы обращаемся к объекты а не к массиву он это понимает автоматом и перебирает нам обхект. Так же и ключи выводятся и индекс тоже
<li v-for="(value, key, index) in person">{{index}} {{key}} {{value}}</li>

//////////////////////////////////////////////////////
Модификаторы дериктив

v-on:click.prevent=""    // равносильно вызову функции с кодом e.preventDefault

v-on:keyup.enter="alertvalue" //Выполнить функцию только по нажатию Enter
v-on:keyup.enter.space="alertvalue" //Выполнить функцию только по нажатию Enter и space

v-model.lazy - изменение только при смене фокуса


//////////////////////////////////////////////////////
События клавиатуры
<input type="text" v-on:keyup="alertvalue">
/
alertvalue: function(e){
		if(e.keyCode == 13){ //Выполнить при нажатии Enter
				alert(e.target.value);
		}
}




//////////////////////////////////////////////////////
Ярлыки

Позволяют заменять дериктивы на другие варианты записи
<a v-bind:href="url" >google</a>
===
<a :href="url" >google</a>

или

<input type="submit" v-on:click="counter++" value="+">
===
<input type="submit" @click="counter++" value="+">





//////////////////////////////////////////////////////
При создании объекта Vue его можно поместить в переменную. Т.о. к нему можно будет обращаться, например, из других обхектов Vue
var vue1 = new Vue({
		el: '#app',
		data:{
				title: 'Vue 1'
		},
		methods:{
			alert: function(){
				alert('kavabanga');
			}
		}
})
Обращаться можно как к переменным так и к функциям. 
console.log(vue1.title);
vue1.alert();

//////////////////////////////////////////////////////
Референции - доступ к DOM элементам ($refs - это системный объект со всеми референциями DOM)
<h2 ref="headeing"> {{title}} </h2>

upt: function(){
		this.title = 'new title'
		this.$refs.headeing.style.color = 'red'
}


////////////////////////////////////////////////////////////////
Компоненты. Части кода объеденяющие в себе функции и необходимые для них переменные, а так же куски html кода необходимые для функций, можно выносить за код инициализации приложения для того что бы в самом приложении повторять их несколько раз вызывая с помощью html тега. Сокращает код, позволяет использовать один и тот же компонент в разных приложениях.
Компонент нужно объявлять до приложения. Компонент можно делать локальным для какого-то конретного приложения с помощью заголовка components.
Название компонента принято писать в кэмлмейсе.А вот вызывать его через тире для валидности. Например:
components:{
	myComponent: component
}

myComponent == my-component == <my-component></my-component>

Название компонента является html тегом по которому его вызывают.

//////////

Передача паметров между компонентами
1. <app-car v-bind:carName="carName"></app-car>
2.
export default {
	props: ['carName'],
}

////////////////////////////////////////////////////////////////
Передача параметров от дочернего компонента к родителю
Для этого нужно добавить метод в компонент откуда передается параметр
this.$emit('nameChanged',this.carName); (где первый параметр это любая переменная)

И получить его в приложении с помощью записи
@nameChanged="carName = $event"

Напомню так же общий вид приложения:
<app-car 
:carName="carName"
:carYear="carYear"
@nameChanged="carName = $event"
></app-car>


//////////
Передача функции как параметра от родителя к дочернему компоненту
для этого в родителе создаем метод с новым параметром
methods:{
	changeNameTo(){
		this.carName = 'Audi'
	}
}

Далее передаем его тут же в приложение так:
:changeFunc="changeNameTo"

А в дочернем ожидаем его к принятию:
props:{
	changeFunc: Function 
},

//////////
Передача параметра между компонентами и в родительский компонент
Родительский компонент:
подключаем два компонента. Первый на вывод обробатываемого свойства второй для работы с этим свойством
import Component2 from './Component2.vue'
import Component1 from './Component1.vue'

Подключаем компоненты
components:{
	appComponent2: Component2,
	appComponent1: Component1
}

Создаем свойство
data () {
	return {
		counter: 0
	}
},

Компонент 1:
Принимаем это свойство что бы вывести его в этом компоненте:
props:['counter']

Компонент 2:
сначала принемаем свойство от родителя
props:{
	counter: Number,
},

Потом работаем с этим свойством(увеличиваем на 1) и отдаем его в другой компонент:
methods:{
	updateCnt(){
		this.$emit('counterUpd', this.counter+1)
	}
},
и тут же делаем кнопку с событием на запуск функции
<button @click="updateCnt()">Count++</button>


Родительский компонент:
И снова в родителе не забываем добавить прослушку на функцию из компонента 1 которая возвращает измененное свойство
<app-car 
@counterUpd="counter = $event"
></app-car>

//////////
ЕЩЕ РАЗ НО ПРОЩЕ: Передача параметра между компонентами и в родительский компонент

Это делется с помощью Шины событий.
В корневом файле main.js вызываем новый компонент Vue
export const eventEmitter = new Vue();

Родительский компонент:
Импортировать 2 компонента и всё

Компонент 1:

Тут мы импортируем обеъект  eventEmitter
import { eventEmitter } from './main'
И описываем событие связанное с параметром:

data(){
	return{
		counter: 0
	}
},
created(){
	eventEmitter.$on('counterUpd', () =>{
		this.counter++
	})
}

Компонент 2:
Тут мы так же импортируем объект eventEmitter
import {eventEmitter} from './main.js'

Оставляем описание метода работы со свойством
updateCnt(){
	eventEmitter.$emit('counterUpd') 
}

(тут можно еще и передать параметр)
eventEmitter.$emit('counterUpd',3)
(ну и в комп.1 вызвать его конечно же)
eventEmitter.$on('counterUpd', (number) =>{

и естественно кнопку с событием
<button @click="updateCnt()">Count++</button>

////////////////////////////////////////////////////////////////
Изолирование стилей в компонентах

Описывая стили нужно добавить отрибут scoped
<style scoped>
</style>

////////////////////////////////////////////////////////////////
Что бы писать HTML в тегах компонента нужно использовать slot
<slot></slot>

- он показывает куда конкретно вставить html. Этот тег вставляется к template в компоненте дочернем. Ну и как бы то что мы пишем в родителе может быть передано туда.

можно делать конкретнее
<slot name='title'></slot>
а там где передаем помечаем корневой тег
<h2 slot="title">THIS IS TITLE</h2>


////////////////////////////////////////////////////////////////

Валидация форм

в первую очерень это v-model

<input type="text" v-model="name">
<p>{{name}}</p>


export default{
	data(){
		return{
			name: '';			
		}
	}
}

v-model.lazy - модификатор lazy дает сработать прослушке состояния инпута только по blur.

CHECKBOX

<input type="checkbox" v-model="checkboxes" value="CHECK_NAME_1">
<input type="checkbox" v-model="checkboxes" value="CHECK_NAME_2">

data(){
	return{
		checkboxes: []; //checkboxes: ['CHECK_NAME_1'] - по дефолту CHECK_NAME_1
	}
}


Модификаторы v-model
v-model.number - приводит строку в инпуте к числу. при этом он позволяет писать строки но не обрабатывает их. только числа

//////////

Валидация форм выполняется с помощью дополнительного модуля vuelidate

Установить:
npm i vuelidate -D 

И импортировать в main.js
import Vuelidate from 'vuelidate'

И там же вызываем библиотеку
Vue.use(Vuelidate)


Далее мы можем вызвать поле validations в описании компонента и указать в нем те поля которые хотим валидировать

Описав конкретное input в поле validations нужно этому импуту сделать ривязку. добавив ему атибут @input="$v", далее уточнить тот способ валидации который нужен и добавив метод touch()
@input="$v.email.$touch()"


Пример
validations:{
	email:{
		required: required
	}
}

<input type="text" id="email" class="form-control" @input="$v.email" v-model="email">


















////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Куски кода - Примеры

//////////
тоггл класса
<div class="sq" @click="isActive = !isActive" :class="{'red': isActive}"></div>

new Vue({
		el: '#app',
		data:{
				isActive:false
		}
})

//////////

Передача параметра (класса) v-model
<div  class="sq" :class="color"></div>
<input type="text" v-model="color">

//////////
Объединение двух методов выше для условий
<div  class="sq" :class="[color, {'red': isActive}]"></div>
<input type="text" v-model="color">

//////////
писать стили инлайном так. Плюс можно их совмещать с методами
<div class="sq" :style="[sqClasses,{'width': height + 'px'}]"></div>
<input type="text" v-model="color">
<input type="text" v-model="height">

new Vue({
		el: '#app',
		data:{
				isActive:false,
				color: 'blue',
				height: '100'
		},
		computed:{
				sqClasses: function(){
						return{
						'background': this.color,
						'height': this.height + 'px'
						}
				}
		}
});

//////////
