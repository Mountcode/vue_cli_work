 String

\n - перенос строки
const text = "word  /n word word"
\\\\
.toLowerCase() - Нижний регистр
.toUpperCase() - Верхний регистр
\\\\
.indexOf(key) - возвращает позицию первого символа от искомой части строки.
начинает отсчет с нуля. Если ничего найдно не было то вернет -1
.lastIndexOf() - так же как и indexOf возвращает позицию от искомой строки.
Но позицию последнего элемента. Если искомые строки будут 
дублироваться в массиве текста то вернет позицию последнего элемента последнего дубля.
.trim() - удаляет пробелы с начала и конца строки
\\\\
.substr(8,3) - возвращает строку начиная с указанной позиции и указанной длины.
Если не указать второй аргумент то возвращает все символы от указанного и до конца строки.
.substring() - возвращает строку с и до указанной позиции. от какого номера и по какой номер. 
если стартовая позиция больше последней то аргументы меняются местами.
.slice() - возвращает строку начиная с и до указанной позиции. 
Работает так же как substring(). Разница у методов только если аргументами идут отрицательные числа. 
У Slice отрицательные значения означают отсчет с конца строки.
\\\\
.split() - разделяет строку на массив подстрок по указанному разделителю
можно разделить например по пробелу. тогда получим массив всех слов и знаков пунктуации.
раздлитель не учитывается и удаляется из получаемого массива.
.concat() - объединяет несколько строк в одну и возвращает новую.
let good = "good song"
let songName = "song nsme is: "
concatText = song.concat(song, good)
Но рекомендуется использовать обычное слияние строк через +

\\\\
Шаблонные строки (ES6)
const name = 'John'
`Hello ${name}!`; \\ Hello john!
- тут используются именно такие кавычки ``.
- подставлять можно так же и функции
- можно перносить строку обычным переносом строки без спец символов.


 ///////////////////////////////////////////////////////